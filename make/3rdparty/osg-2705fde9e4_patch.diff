diff --git a/src/osg/Program.cpp b/src/osg/Program.cpp
index 6014f9e..672a7c5 100644
--- a/src/osg/Program.cpp
+++ b/src/osg/Program.cpp
@@ -504,7 +504,7 @@ void Program::apply( osg::State& state ) const
         ++itr)
     {
         const State::DefineStack& ds = itr->second;
-        OSG_NOTICE<<"  define ["<<itr->first<<"] ds.changed="<<ds.changed<<" ";
+        // OSG_NOTICE<<"  define ["<<itr->first<<"] ds.changed="<<ds.changed<<" ";
         if (ds.defineVec.empty())
         {
             OSG_NOTICE<<" DefineStack empty "<<std::endl;
diff --git a/src/osg/Shader.cpp b/src/osg/Shader.cpp
index d3101e7..4e76301 100644
--- a/src/osg/Shader.cpp
+++ b/src/osg/Shader.cpp
@@ -729,7 +729,7 @@ void Shader::PerContextShader::detachShader(GLuint program) const
 
 void Shader::_parseShaderDefines(const std::string& str, ShaderDefines& defines)
 {
-    OSG_NOTICE<<"Shader::_parseShaderDefines("<<str<<")"<<std::endl;
+    // OSG_NOTICE<<"Shader::_parseShaderDefines("<<str<<")"<<std::endl;
     std::string::size_type start_of_parameter = 0;
     do
     {
@@ -754,7 +754,7 @@ void Shader::_parseShaderDefines(const std::string& str, ShaderDefines& defines)
         {
             std::string parameter = str.substr(start_of_parameter, end_of_parameter-start_of_parameter);
             defines.insert(parameter);
-            OSG_NOTICE<<"   defines.insert("<<parameter<<")"<<std::endl;
+            // OSG_NOTICE<<"   defines.insert("<<parameter<<")"<<std::endl;
         }
 
         start_of_parameter = end_of_parameter+1;
@@ -779,7 +779,7 @@ void Shader::_computeShaderDefines()
         std::string::size_type eol = _shaderSource.find_first_of("\n\r", pos);
         if (eol==std::string::npos) eol = _shaderSource.size();
 
-        OSG_NOTICE<<"\nFound pragma line ["<<_shaderSource.substr(first_chararcter, eol-first_chararcter)<<"]"<<std::endl;
+        // OSG_NOTICE<<"\nFound pragma line ["<<_shaderSource.substr(first_chararcter, eol-first_chararcter)<<"]"<<std::endl;
 
         if (first_chararcter<eol)
         {
@@ -797,7 +797,7 @@ void Shader::_computeShaderDefines()
                 if (keyword == "import_defines") _parseShaderDefines(str, _shaderDefines);
                 else if (keyword == "requires") _parseShaderDefines(str, _shaderRequirements);
                 else {
-                    //OSG_NOTICE<<"  keyword not matched ["<<keyword<<"]"<<std::endl;
+                    // OSG_NOTICE<<"  keyword not matched ["<<keyword<<"]"<<std::endl;
                     _parseShaderDefines(str, _shaderDefines);
                 }
 #if 1
@@ -805,14 +805,14 @@ void Shader::_computeShaderDefines()
                     itr != _shaderDefines.end();
                     ++itr)
                 {
-                    OSG_NOTICE<<"      define ["<<*itr<<"]"<<std::endl;
+                    // OSG_NOTICE<<"      define ["<<*itr<<"]"<<std::endl;
                 }
 
                 for(ShaderDefines::iterator itr = _shaderRequirements.begin();
                     itr != _shaderRequirements.end();
                     ++itr)
                 {
-                    OSG_NOTICE<<"      requirements ["<<*itr<<"]"<<std::endl;
+                    // OSG_NOTICE<<"      requirements ["<<*itr<<"]"<<std::endl;
                 }
 #endif
 
diff --git a/src/osgGA/NodeTrackerManipulator.cpp b/src/osgGA/NodeTrackerManipulator.cpp
index da82979..1088ec4 100644
--- a/src/osgGA/NodeTrackerManipulator.cpp
+++ b/src/osgGA/NodeTrackerManipulator.cpp
@@ -275,7 +275,7 @@ bool NodeTrackerManipulator::performMovementLeftMouseButton( const double eventT
     } else
         rotateTrackball( _ga_t0->getXnormalized(), _ga_t0->getYnormalized(),
                          _ga_t1->getXnormalized(), _ga_t1->getYnormalized(),
-                         _thrown ? float( _delta_frame_time / eventTimeDelta ) : 1.f );
+                         getThrowScale( eventTimeDelta ) );
 
     return true;
 }
diff --git a/src/osgGA/OrbitManipulator.cpp b/src/osgGA/OrbitManipulator.cpp
index 4ac666e..ad25f2d 100644
--- a/src/osgGA/OrbitManipulator.cpp
+++ b/src/osgGA/OrbitManipulator.cpp
@@ -20,14 +20,13 @@
 #include <osg/BoundsChecking>
 #include <cassert>
 
+#define LC "[OrbitManipulator] "
+
 using namespace osg;
 using namespace osgGA;
 
-
-
 int OrbitManipulator::_minimumDistanceFlagIndex = allocateRelativeFlag();
 
-
 /// Constructor.
 OrbitManipulator::OrbitManipulator( int flags )
    : inherited( flags ),
@@ -384,7 +383,9 @@ void OrbitManipulator::rotateTrackball( const float px0, const float py0,
     osg::Vec3d axis;
     float angle;
 
-    trackball( axis, angle, px0 + (px1-px0)*scale, py0 + (py1-py0)*scale, px0, py0 );
+    // OSG_NOTICE << LC << "rotateTrackball scale=" << scale << std::endl;
+
+    trackball( axis, angle, px0 + (px1 - px0) * scale, py0 + (py1 - py0) * scale, px0, py0 );
 
     Quat new_rotate;
     new_rotate.makeRotate( angle, axis );
diff --git a/src/osgGA/StandardManipulator.cpp b/src/osgGA/StandardManipulator.cpp
index d0c73c7..faa0855 100644
--- a/src/osgGA/StandardManipulator.cpp
+++ b/src/osgGA/StandardManipulator.cpp
@@ -19,6 +19,8 @@
 #include <osgGA/StandardManipulator>
 #include <osgViewer/View>
 
+#define LC "[StandardManipulator] "
+
 using namespace osg;
 using namespace osgGA;
 using namespace osgUtil;
@@ -279,6 +281,9 @@ bool StandardManipulator::handleFrame( const GUIEventAdapter& ea, GUIActionAdapt
     _delta_frame_time = current_frame_time - _last_frame_time;
     _last_frame_time = current_frame_time;
 
+    //OSG_NOTICE << LC << "handleFrame delta_frame_time=" << _delta_frame_time << std::endl;
+    //OSG_NOTICE << LC << "handleFrame last_frame_time=" << _last_frame_time << std::endl;
+
     if( _thrown && performMovement() )
     {
         us.requestRedraw();
@@ -590,6 +595,8 @@ float StandardManipulator::getThrowScale( const double eventTimeDelta ) const
 {
     if( _thrown )
     {
+        // OSG_NOTICE << LC << "getThrowScale _delta_frame_time=" << _delta_frame_time << std::endl;
+        // OSG_NOTICE << LC << "getThrowScale eventTimeDelta=" << eventTimeDelta << std::endl;
         if (eventTimeDelta == 0.f)
             return 0.f;
         return float( _delta_frame_time / eventTimeDelta );
